"""create products table

Revision ID: 309516c30f6a
Revises: 
Create Date: 2021-11-11 02:55:03.329333

"""
from datetime import datetime
from typing import Tuple
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic
revision = '309516c30f6a'
down_revision = None
branch_labels = None
depends_on = None

def create_updated_at_trigger() -> None:
    op.execute(
        """
        CREATE OR REPLACE FUNCTION update_updated_at_column()
            RETURNS TRIGGER AS
        $$
        BEGIN
            NEW.updated_at = now();
            RETURN NEW;
        END;
        $$ language 'plpgsql';
        """
    )

def timestamps(indexed: bool = False) -> Tuple[sa.Column, sa.Column]:
    return (
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.func.now(),
            nullable=False,
            index=indexed,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.func.now(),
            nullable=False,
            index=indexed,
        ),
    )

def create_cleanings_table()-> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('products',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('product_name', sa.Text(), nullable=False),
    sa.Column('brand', sa.Text(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('type', sa.Text(), server_default='idk, a bottle', nullable=False),
    sa.Column('what_do', sa.Text(), server_default='trade', nullable=False),
    sa.Column('price', sa.Numeric(precision=10, scale=2), nullable=True),
    *timestamps(),
    sa.PrimaryKeyConstraint('id'),
    )
    op.create_index(op.f('ix_products_product_name'), 'products', ['product_name'], unique=False)
    op.execute(
        """
        CREATE TRIGGER update_products_modtime
            BEFORE UPDATE
            ON products
            FOR EACH ROW
        EXECUTE PROCEDURE update_updated_at_column();
        """
    )
    # ### end Alembic commands ###

def create_users_table()-> None:
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.Text(), nullable=False),
    sa.Column('email', sa.Text(), nullable=False),
    sa.Column('email_verified', sa.Boolean(), server_default='False', nullable=False),
    sa.Column('salt', sa.Text(), nullable=False),
    sa.Column('password', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), server_default='True', nullable=False),
    sa.Column('is_superuser', sa.Boolean(), server_default='False', nullable=False),
    *timestamps(),
    sa.PrimaryKeyConstraint('id'),
    )
    op.execute(
        """
        CREATE TRIGGER update_user_modtime
            BEFORE UPDATE
            ON users
            FOR EACH ROW
        EXECUTE PROCEDURE update_updated_at_column();
        """
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)

def upgrade() -> None:
    create_updated_at_trigger()
    create_cleanings_table()
    create_users_table()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_products_product_name'), table_name='products')
    op.drop_table('products')
    op.execute("DROP FUNCTION update_updated_at_column")
    # ### end Alembic commands ###

